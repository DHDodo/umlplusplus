name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
  pull_request:
    branches:
      - 'develop'

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Make test image to run tests and acquire code coverage
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: umlplusplus:test

      - name: Run tests within test container
        run: |
          docker run --rm umlplusplus:test ./Tests  
      
        # This step copies the code coverage files that are in the image to the virtual repo so that they can be uploaded to codecov.
      - name: Copy code coverage files from image to virtual repo
        uses: shrink/actions-docker-extract@v3
        with:
          image: umlplusplus:test
          path: /gcov/.
          destination: .

        # Attempts to push code coverage to Codecov page.
        # Codecov page: https://app.codecov.io/gh/DHDodoCode/umlplusplus/
      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v4
        with:
          # List all important model files tested with gcov. Do not add spaces between commas.
          files: ./UMLClass.cpp.gcov,./UMLRelationship.cpp.gcov,./UMLAttribute.cpp.gcov,./UMLField.cpp.gcov,./UMLMethod.cpp.gcov,./UMLParameter.cpp.gcov,./UMLData.cpp.gcov,./UMLDataHistory.cpp.gcov,./UMLFile.cpp.gcov
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
    
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      - name: Build docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            umlplusplus:latest
            umlplusplus:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
  
      
